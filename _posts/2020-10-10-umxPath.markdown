---
layout: post
title: "umxPath"
date: 2020-10-10 00:00
comments: true
categories: models tutorial RAM
---

| Type of Gene-Environment Correlation | Instance                                                                  |
|:-------------------------------------|:--------------------------------------------------------------------------|
| Passive G-E                          | Genes in biological parents affect rearing environment given to the child |
| Evocative G-E                        | Gene's phenotype elicits environments from others.                        |
| Active G-E                           | Child engineers environments that promote a particular trait.             |

# This post is an alpha: a work in progress...

# umxPath

A core function added to umx is the `umxPath` function.
This function adds some extra verbs for path specification, designed to streamline script writing, and increase readability of RAM models.

Here's how umxPath is used to specify a 1-latent factor CFA. First we source some data, and begin to specify the mxModel:

```splus
data(myFADataRaw, package = "OpenMx")
latents = c("A","B")
manifests = paste0("x", 1:3)
df = myFADataRaw[, manifests]
m1 <- mxModel("m1", type = "RAM",
	latentVars = latents,
	manifestVars = manifests,
```

The use of umxPath begins as we specify the paths

```splus
	umxPath("B", to   = manifests),
	umxPath("A", with = "B", fixedAt = 1),
	umxPath(means = manifests),
	umxPath(var   = manifests),
	umxPath(means = latents, fixedAt = 0),
	umxPath(var   = latents, fixedAt = 1),
	mxData(df, "raw")
)

```

Here it is all in one pack, including code to run and plot the model:

```splus
data(myFADataRaw, package = "OpenMx")
manifests = paste0("x", 1:3)
latents = c("A","B")
df = myFADataRaw[, manifests]

m1 <- mxModel("m1", type = "RAM",
	latentVars   = latents,
	manifestVars = manifests,
	umxPath("B", to = manifests),
	umxPath("A", with = "B", fixedAt = 1),
	umxPath(means = manifests),
	umxPath(means = latents, fixedAt = 0),
	umxPath(var   = manifests),
	umxPath(var   = latents, fixedAt = 1),
	mxData(df, "raw")
)
m1 = umxRun(m1, setLabels = T, setValues = T)
umxSummary(m1)
plot(m1, showFixed=T)
    
```
![UmxPath Model1](/media/umxPath/umxPath_model1.png)

Compare that to using mxPath:

```splus
data(myFADataRaw, package = "OpenMx")
manifests = paste0("x", 1:3)
latents = c("A","B")
df = myFADataRaw[, manifests]

m1 <- mxModel("m1", type="RAM", 
	latentVars = latents,
	manifestVars = manifests,
	mxPath(from = "B", to = manifests),
	mxPath(from = "A", to = "B", arrows = 2, free = F, values = 1),
	mxPath(from = "one", to = manifests),
	mxPath(from = "one", to = latents, free = F, values = 0),
	mxPath(from = manifests, arrows = 2, free = F, values = 1),
	mxPath(from = latents  , arrows = 2, free = F, values = 1),
	mxData(df, "raw")
)
    
```

The new verbs for *connecting variables* are shown below, along with their mxPath equivalents

| New verb           | mxPath Equivalent                |
|:-------------------|:---------------------------------|
| var  = "X"         | from = "X", arrows = 2           |
| "X", with = "Y"    | from = "X", to = "Y", arrows = 2 |
| cov = c("X","Y")   | from = "X", to = "Y", arrows = 2 |
| means = c("X","Y") | from = "one", to = c("X","Y")    |

The new verbs for *setting values* are shown below, along with their mxPath equivalents

| New verb     | mxPath Equivalent                                  |
|:-------------|:---------------------------------------------------|
| fixedAt = 1  | free = FALSE, values = 1                           |
| firstAt = 1  | free = c(FALSE, TRUE, TRUE), values = c(1, NA, NA) |

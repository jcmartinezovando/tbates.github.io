---
layout: post
title: "Hello World: with umxRAM and umxPath"
date: 2020-11-29 00:00
comments: true
categories: models tutorial
---

<a name="top"></a>

[Previously](/models/tutorial/2020/11/30/First-steps.html), we  made an mxModel equivalent to `lm(mpg ~ disp + gear, data = mtcars)`.

Here's how we could do it with umxRAM and umxPath:

``` splus
m1 <- mxModel("big_motor_low_mpg", type = "RAM",
	manifestVars = c("mpg", "disp", "gear"),
	mxPath(from = c("disp", "gear"), to = "mpg"),
	mxPath(from = "disp", to = "gear", arrows = 2),
	mxPath(from = c("mpg", "disp", "gear"), arrows = 2),
	mxPath(from = "one", to = c("mpg", "disp", "gear")),
	mxData(mtcars[,c("mpg", "disp", "gear")], type="raw")
)
m1 <- umxRAM("big_motor_low_mpg",
	umxPath(from = c("disp", "gear"), to = "mpg"),
	umxPath(cov = c("disp", "gear")),
	umxPath(var = c("mpg", "disp", "gear")),
	data = mtcars
)

m1 = umxRun(m1); 
summary(m1)
umxSummary(m1, show = "raw"); 
plot(m1)
mxStandardizeRAMpaths(m1)
```
As before,  `umxSummary` shows that m1 fits well: χ²(2) = 0, p 1.000; CFI = 1.042; TLI = 1.063; RMSEA = 0.

But we didn't need to set manifestVars or type=RAM, we add data the way lm users are used to, and the path statements were shorter, which is handy.

Breaking that out step by step for clarity, moving from `mxModel` to `umxRAM` means the model will built manifestVars and latentVars from the paths we request, and it will also select the correct columns from the raw data, if provided.


`umxPath("disp", with = "gear")` shows the new verb "with". This is the same as `mxPath(from = "disp", to = "gear", arrows = 2)`.

`umxPath(var = "mpg")` shows the new verb var. This is the same as `mxPath(from = "mpg", to = "mpg", arrows = 2)`.

`umxPath(var = "disp", fixedAt = var(mtcars$disp))` Shows the new verb `fixedAt`. This is the same as saying:

```splus
mxPath(from = "disp", to = "disp", arrows = 2, free = false, values = var(mtcars$disp) )
```

the line

```splus
    data = mxData(cov(mtcars[,manifests]), type = "cov", numObs = nrow(mtcars))
```
shows how umxRAM takes data just like lm does: i.e., in  a "data = " statement.


![model 1](/media/1_make_a_model/mtcar2.png "Model 1")
